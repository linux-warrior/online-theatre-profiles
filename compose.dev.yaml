name: online-theatre-user-profiles

services:
  nginx:
    build:
      context: ./compose/nginx
      target: dev
    depends_on:
      movies:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      profiles-service:
        condition: service_healthy
    ports:
      - '8000:8080'
    networks:
      - movies-network
    volumes:
      - nginx-logs-data:/opt/bitnami/nginx/logs/
    develop:
      watch:
        - action: sync+restart
          path: ./compose/nginx/conf
          target: /opt/bitnami/nginx/conf/

  movies:
    build:
      context: ./src
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - PROJECT_NAME=$PROJECT_NAME
      - AUTH_HOST=auth-service
      - AUTH_PORT=8000
      - OTEL_ENABLED=${OTEL_ENABLED:-True}
      - OTEL_REQUEST_ID_REQUIRED=${OTEL_REQUEST_ID_REQUIRED:-True}
      - OTEL_EXPORTER_OTLP_HTTP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-movies}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTIC_HOST=elasticsearch
      - ELASTIC_PORT=9200
    command: [ '/opt/app/commands/fastapi.sh', 'dev' ]
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s -H "X-Request-Id: healthcheck" http://localhost:8000/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - action: sync
          path: ./src/movies
          target: /opt/app/movies
        - action: rebuild
          path: ./src/commands
        - action: rebuild
          path: ./src/pyproject.toml
        - action: rebuild
          path: ./src/poetry.lock

  redis:
    build:
      context: ./compose/redis
    networks:
      - movies-network
    volumes:
      - 'redis-data:/bitnami/redis/data'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: [ '/opt/bitnami/scripts/redis/run.sh', '--maxmemory', '${REDIS_MAXMEMORY:-200mb}' ]
    healthcheck:
      test: [ 'CMD', '/bin/bash', '-c', '[[ $(redis-cli ping) == "PONG" ]]' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  elasticsearch:
    build:
      context: ./compose/elasticsearch
    networks:
      - movies-network
    volumes:
      - 'elasticsearch-data:/bitnami/elasticsearch/data'
    environment:
      - ELASTICSEARCH_HEAP_SIZE=${ELASTICSEARCH_HEAP_SIZE:-200m}
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', '/opt/bitnami/scripts/elasticsearch/healthcheck.sh' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s

  etl:
    build:
      context: ./compose/etl
    depends_on:
      postgresql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - movies-network
    volumes:
      - 'etl-data:/opt/app/data'
      - 'etl-logs:/opt/app/logs'
    environment:
      - POSTGRESQL_HOST=postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - ELASTIC_HOST=elasticsearch
      - ELASTIC_PORT=9200
    restart: unless-stopped
    develop:
      watch:
        - action: sync+restart
          path: ./compose/etl/etl
          target: /opt/app/etl
        - action: sync+restart
          path: ./compose/etl/schema
          target: /opt/app/schema
        - action: rebuild
          path: ./compose/etl/commands
        - action: rebuild
          path: ./compose/etl/pyproject.toml
        - action: rebuild
          path: ./compose/etl/poetry.lock

  postgresql:
    build:
      context: ./compose/postgresql
    networks:
      - movies-network
    volumes:
      - 'postgresql-data:/bitnami/postgresql'
      - './compose/postgresql/db/database_dump.sql:/docker-entrypoint-initdb.d/init.sql'
    environment:
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready --username=$POSTGRESQL_USERNAME --dbname=$POSTGRESQL_DATABASE' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  auth-service:
    build:
      context: ./compose/auth
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
      auth-service-init:
        condition: service_completed_successfully
      jaeger:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - AUTH_SECRET_KEY=$AUTH_SECRET_KEY
      - AUTH_ACCESS_JWT_LIFETIME=${AUTH_ACCESS_JWT_LIFETIME:-3600}
      - AUTH_REFRESH_JWT_LIFETIME=${AUTH_REFRESH_JWT_LIFETIME:-86400}
      - AUTH_SQL_ECHO=${AUTH_SQL_ECHO:-True}
      - OAUTH_GOOGLE_CLIENT_ID=${AUTH_OAUTH_GOOGLE_CLIENT_ID:-}
      - OAUTH_GOOGLE_CLIENT_SECRET=${AUTH_OAUTH_GOOGLE_CLIENT_SECRET:-}
      - OTEL_ENABLED=${OTEL_ENABLED:-True}
      - OTEL_REQUEST_ID_REQUIRED=${OTEL_REQUEST_ID_REQUIRED:-True}
      - OTEL_EXPORTER_OTLP_HTTP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=${AUTH_OTEL_SERVICE_NAME:-auth}
      - SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - RATELIMITER_TIMES=$RATELIMITER_TIMES
      - RATELIMITER_SECONDS=$RATELIMITER_SECONDS
      - POSTGRESQL_HOST=auth-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
      - REDIS_HOST=auth-redis
      - REDIS_PORT=6379
    command: [ '/opt/app/commands/fastapi.sh', 'dev' ]
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s -H "X-Request-Id: healthcheck" http://localhost:8000/auth/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - action: sync
          path: ./compose/auth/auth
          target: /opt/app/auth
        - action: sync
          path: ./compose/auth/scripts
          target: /opt/app/scripts
        - action: rebuild
          path: ./compose/auth/commands
        - action: rebuild
          path: ./compose/auth/pyproject.toml
        - action: rebuild
          path: ./compose/auth/poetry.lock

  auth-service-init:
    build:
      context: ./compose/auth
    depends_on:
      auth-postgresql:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    networks:
      - movies-network
    environment:
      - AUTH_SECRET_KEY=$AUTH_SECRET_KEY
      - AUTH_ACCESS_JWT_LIFETIME=${AUTH_ACCESS_JWT_LIFETIME:-3600}
      - AUTH_REFRESH_JWT_LIFETIME=${AUTH_REFRESH_JWT_LIFETIME:-86400}
      - AUTH_SQL_ECHO=${AUTH_SQL_ECHO:-True}
      - OAUTH_GOOGLE_CLIENT_ID=${AUTH_OAUTH_GOOGLE_CLIENT_ID:-}
      - OAUTH_GOOGLE_CLIENT_SECRET=${AUTH_OAUTH_GOOGLE_CLIENT_SECRET:-}
      - OTEL_ENABLED=${OTEL_ENABLED:-True}
      - OTEL_REQUEST_ID_REQUIRED=${OTEL_REQUEST_ID_REQUIRED:-True}
      - OTEL_EXPORTER_OTLP_HTTP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=${AUTH_OTEL_SERVICE_NAME:-auth}
      - SUPERUSER_LOGIN=$AUTH_SUPERUSER_LOGIN
      - SUPERUSER_PASSWORD=$AUTH_SUPERUSER_PASSWORD
      - RATELIMITER_TIMES=$RATELIMITER_TIMES
      - RATELIMITER_SECONDS=$RATELIMITER_SECONDS
      - POSTGRESQL_HOST=auth-postgresql
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
      - REDIS_HOST=auth-redis
      - REDIS_PORT=6379
    command: [ '/opt/app/commands/init.sh' ]

  auth-postgresql:
    build:
      context: ./compose/postgresql
    networks:
      - movies-network
    volumes:
      - 'auth-postgresql-data:/bitnami/postgresql'
    environment:
      - POSTGRESQL_DATABASE=$AUTH_POSTGRESQL_DATABASE
      - POSTGRESQL_USERNAME=$AUTH_POSTGRESQL_USERNAME
      - POSTGRESQL_PASSWORD=$AUTH_POSTGRESQL_PASSWORD
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready --username=$AUTH_POSTGRESQL_USERNAME --dbname=$AUTH_POSTGRESQL_DATABASE' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  auth-redis:
    build:
      context: ./compose/redis
    networks:
      - movies-network
    volumes:
      - 'auth-redis-data:/bitnami/redis/data'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: [ '/opt/bitnami/scripts/redis/run.sh', '--maxmemory', '${AUTH_REDIS_MAXMEMORY:-200mb}' ]
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', '/bin/bash', '-c', '[[ $(redis-cli ping) == "PONG" ]]' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  profiles-service:
    build:
      context: ./compose/profiles
    networks:
      - movies-network
    command: [ '/opt/app/commands/fastapi.sh', 'dev' ]
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'curl -s -H "X-Request-Id: healthcheck" http://localhost:8000/profiles/api/_health' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    develop:
      watch:
        - action: sync
          path: ./compose/profiles/profiles
          target: /opt/app/profiles
        - action: rebuild
          path: ./compose/profiles/commands
        - action: rebuild
          path: ./compose/profiles/pyproject.toml
        - action: rebuild
          path: ./compose/profiles/poetry.lock

  jaeger:
    build:
      context: ./compose/jaeger
    ports:
      - '16686:16686'
    networks:
      - movies-network
    healthcheck:
      test: [ 'CMD-SHELL', 'wget -q --spider http://localhost:16686' ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

networks:
  movies-network:

volumes:
  nginx-logs-data:
  redis-data:
  elasticsearch-data:
  etl-data:
  etl-logs:
  postgresql-data:
  auth-postgresql-data:
  auth-redis-data:
